>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>
>>> print(bg) # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at ...>

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
TypeError: BaseGeometry() takes no arguments

>>> bg = BaseGeometry()
>>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.area of <7-base_geometry.BaseGeometry
object at...>>

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> print(bg.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry 
object at...>>

>>> bg.integer_validator("valid no", 1)
>>> bg.integer_validator("invalid no", "no")
Traceback (most recent call last):
TypeError: invalid no must be an integer

>>> bg.integer_validator("invalid no", True)
Traceback (most recent call last):
TypeError: invalid no must be an integer

>>> bg.integer_validator("tuple", (1,))
Traceback (most recent call last):
TypeError: tuple must be an integer

>>> bg.integer_validator("list_no", [3])
Traceback (most recent call last):
TypeError: list_no must be an integer

>>> bg.integer_validator("set_no", {5, 6})
Traceback (most recent call last):
TypeError: set_no must be an integer

>>> bg.integer_validator("any_no", None)
Traceback (most recent call last):
TypeError: any_no must be an integer

>>> bg.integer_validator("the_no", 0)
Traceback (most recent call last):
ValueError: the_no must be greater than 0

>>> bg.integer_validator("the_no", -1)
Traceback (most recent call last):
ValueError: the_no must be greater than 0

>>> bg.integer_validator() # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 
'name' and 'value'

>>> bg.integer_validator(None) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 
'value'

>>> bg.integer_validator({"b": 2}, (3, 4))
Traceback (most recent call last):
TypeError: unsupported format string passed to dict.__format__
